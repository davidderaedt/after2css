/*
After Effects CSS Animation exporter
You need to enable scripts to write files in AE's Preferences > General panel
*/

function posConvert (myKeyframeValue, layer){
    return "left:" + (myKeyframeValue[0]-layer.width/2) + "px;top:" + (myKeyframeValue[1]-layer.height/2) + "px;";
}
function opacityConvert (myKeyframeValue){
    return "opacity:" + myKeyframeValue+";";
}
function scaleConvert (myKeyframeValue){
    return "transform: scale(" + (myKeyframeValue[0]/100) + "," + (myKeyframeValue[1]/100) + ");";
}
function rotationConvert (myKeyframeValue){
    return "transform: rotate(" + myKeyframeValue + "deg);" ;
}

function getKeyframeData(layer, duration, propName, convertFunc){
    
    var prop = layer[propName];
    var numKeys = prop.numKeys; 

    var myKeyframeTime, myKeyframeValue;

    if (numKeys== 0) {
        return "";
    }

    var txt = "";
    
    var durationPc = duration/100;
    
    $.writeln(layer.name + "-" + propName);

    for(var n=1 ; n <= numKeys ; n++){
        myKeyframeTime = prop.keyTime(n);
        myKeyframeValue = prop.keyValue(n);
        var relativeTime = Math.ceil(myKeyframeTime/durationPc);
        var ease="";
        if(prop.keyOutInterpolationType(n)==KeyframeInterpolationType.LINEAR){
            ease=" -webkit-animation-timing-function: linear;animation-timing-function: linear;";
        }
        
        /*
        $.writeln("in is linear? "+ (prop.keyInInterpolationType(n)==KeyframeInterpolationType.LINEAR));
        $.writeln("out is linear? "+ (prop.keyOutInterpolationType(n)==KeyframeInterpolationType.LINEAR));
        $.writeln("in=" + easeIn[0].speed +", "+easeIn[0].influence);
        $.writeln("out=" + easeOut[0].speed +", "+easeOut[0].influence);
        */
        
        txt +="  " + relativeTime + "% {" + convertFunc(myKeyframeValue, layer) + ease + " }\n";
    }
    //add last keyframe to hold last value
    if(relativeTime!=100)  txt +="  100% {" + convertFunc(myKeyframeValue, layer) + ease + " }\n";
    
    var eltName = layer.name.split(".")[0];
    var mainTxt = "@-webkit-keyframes "+eltName + "-" + propName+" {\n"+txt+"}\n\n";
    mainTxt+= "@keyframes "+eltName+"-"+propName+" {\n"+txt+"}\n\n";
    
    return mainTxt;
}

function getAnimTxt(layerName, compDur, prefix){    
    
    var t="";
    t+=prefix+"animation: "
    t+=layerName+"-position " + compDur + "s 0s forwards,"
    t+=layerName+"-opacity " + compDur + "s 0s forwards,"
    t+=layerName+"-scale " + compDur + "s 0s forwards,"
    t+=layerName+"-rotation " + compDur + "s 0s forwards; "
    return t;
}

function saveTextFile(pText, filepath) {
		
    // get OS specific linefeed
    var fileLineFeed; 
    if ($.os.search(/windows/i) != -1) {
        fileLineFeed = "Windows";
    } else {
		fileLineFeed = "Unix";
	}
	
    fileOut = new File(filepath);
    fileOut.lineFeed = fileLineFeed;
    fileOut.open("w", "TEXT", "????");
    fileOut.write(pText);
    fileOut.close();
}

// Usage
var proj = app.project; 
var comp = proj.activeItem;
var compDur = comp.workAreaDuration;

var outputTxt = "";
var animTxt = "";
var framesTxt="";

var totalLayers = comp.numLayers;

for (var i = 1; i <= totalLayers ; i++){
    
    var layer = comp.layer(i);

    var positionFramesTxt = getKeyframeData(layer, compDur, "position", posConvert);
    var opacityFramesTxt = getKeyframeData(layer, compDur, "opacity", opacityConvert);
    var scaleFramesTxt = getKeyframeData(layer, compDur, "scale", scaleConvert);
    var rotationFramesTxt = getKeyframeData(layer, compDur, "rotation", rotationConvert);

    framesTxt += positionFramesTxt + opacityFramesTxt + scaleFramesTxt + rotationFramesTxt;

    var eltName = layer.name.split(".")[0];
    animTxt += "#"+eltName+"{";
    animTxt+="transform-origin: " + layer.anchorPoint.value[0] + "px " + layer.anchorPoint.value[1] +"px;";    
    animTxt += getAnimTxt(eltName, compDur, "");
    animTxt += getAnimTxt(eltName, compDur, "-webkit-");
    animTxt+="}\n\n";
}

outputTxt = "/*Generated by AfterEffects CSS animation exporter v0*/\n\n" + framesTxt + animTxt;

var destFile = File.saveDialog ("Save CSS file");	
saveTextFile(outputTxt, destFile.fullName);

//$.writeln(outputTxt);

 

